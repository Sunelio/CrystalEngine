#pragma once

#include "ObjectScript.h"
#include <Refureku/Generated/PythonScript.rfkh.h>

const std::string pythonScriptTemplate = 
"# This code was automatically generated by CrystalEngine.\n\n"
"from CrystalPython import *\n\n"
"class __NAME__(ObjectScript):\n"
	"\tdef Start(self):\n"
		"\t\t# -- Content -- #\n"
		"\t\tpass\n\n"
	"\tdef LateStart(self):\n"
		"\t\t# -- Content -- #\n"
		"\t\tpass\n\n"
	"\tdef Update(self):\n"
		"\t\t# -- Content -- #\n"
		"\t\tpass\n\n"
	"\tdef LateUpdate(self):\n"
		"\t\t# -- Content -- #\n"
		"\t\tpass\n";

namespace pybind11 {
	class object;
}

namespace Scripts NAMESPACE()
{
	struct STRUCT() PythonScript : ObjectScript
	{
	private:
		inline static bool pybindInitialized = false;
		pybind11::object* pyObject;
		std::string name;

	public:
		
		METHOD(rfk::Instantiator) static rfk::UniquePtr<PythonScript> customInstantiator(const std::string& filename) {
			return std::make_unique<PythonScript>(filename);
		}
		
		PythonScript(std::string _name);
		~PythonScript() override = default;

		METHOD() static std::string CreatePyFile(const std::string& fileName);
		
		METHOD() void Start() override;
		METHOD() void LateStart() override;
		METHOD() void Update() override;
		METHOD() void LateUpdate() override;

		METHOD() pybind11::object* GetObject() const { return pyObject; }
		METHOD() std::string GetName() const { return name; }

	private:
		void SetValues();
		
        Scripts_PythonScript_GENERATED
	};
}
File_PythonScript_GENERATED
